#!/usr/bin/env python3
"""
Sistema principal de Geometr√≠a Computacional con CGAL
An√°lisis r√°pido de datos de crimen con integraci√≥n OSMnx
"""

import sys
from pathlib import Path
import time
import logging

# A√±adir el directorio src al path
sys.path.append(str(Path(__file__).parent))

from src.geometry import FastPostGISLike

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def main():
    """Funci√≥n principal del sistema"""
    
    print("üöÄ SISTEMA DE GEOMETR√çA COMPUTACIONAL CON CGAL")
    print("=" * 50)
    
    # Crear analizador
    analyzer = FastPostGISLike()
    
    # Ruta al archivo CSV de crimen
    csv_path = "/Users/pierre/Downloads/crimen_fusionado.csv"
    
    total_start = time.time()
    
    try:
        # 1. Inserci√≥n masiva de puntos (como PostGIS)
        print("\n1Ô∏è‚É£ INSERCI√ìN MASIVA DE PUNTOS")
        if not analyzer.bulk_insert_points(csv_path):
            logger.error("Error en inserci√≥n masiva de puntos")
            return
        
        # 2. An√°lisis geom√©trico con CGAL
        print("\n2Ô∏è‚É£ AN√ÅLISIS GEOM√âTRICO CON CGAL")
        geometry_results = analyzer.fast_geometry_analysis()
        
        if geometry_results:
            perf = geometry_results.get('performance', {})
            print(f"   üìä Tri√°ngulos de Delaunay: {len(geometry_results.get('delaunay_triangles', []))}")
            print(f"   üî∫ Envolvente convexa: {len(geometry_results.get('convex_hull', []))}")
            print(f"   ‚ö° Velocidad: {perf.get('points_per_second', 0):.0f} puntos/seg")
        
        # 3. Crear grafo OSMnx optimizado
        print("\n3Ô∏è‚É£ GRAFO OSMNX OPTIMIZADO")
        if analyzer.create_osmnx_graph_fast():
            # Integraci√≥n r√°pida con muestra
            integration_results = analyzer.fast_osmnx_integration(sample_size=1000)
            if integration_results:
                print(f"   üîó Puntos integrados: {len(integration_results.get('nearest_nodes', []))}")
                print(f"   ‚ö° Velocidad: {integration_results.get('points_per_second', 0):.0f} puntos/seg")
        
        # 4. Consultas espaciales r√°pidas
        print("\n4Ô∏è‚É£ CONSULTAS ESPACIALES R√ÅPIDAS")
        benchmark_results = analyzer.benchmark_queries()
        
        # 5. Consultas de ejemplo
        print("\n5Ô∏è‚É£ CONSULTAS DE EJEMPLO")
        center_sp = (-23.5505, -46.6333)  # Centro de S√£o Paulo
        
        # Consulta por radio
        radius_5km = analyzer.fast_spatial_query(center_sp, 5.0)
        radius_10km = analyzer.fast_spatial_query(center_sp, 10.0)
        print(f"   üìç Puntos en 5km del centro: {len(radius_5km)}")
        print(f"   üìç Puntos en 10km del centro: {len(radius_10km)}")
        
        # Consulta de vecinos m√°s cercanos
        sample_points = [(-23.5505, -46.6333), (-23.5600, -46.6400)]
        nearest = analyzer.fast_nearest_points(sample_points, k=3)
        print(f"   üîç Vecinos m√°s cercanos: {len(nearest)} consultas")
        
        # 6. Exportar resultados
        print("\n6Ô∏è‚É£ EXPORTAR RESULTADOS")
        analyzer.export_to_geojson("crime_points.geojson")
        
        total_time = time.time() - total_start
        
        print(f"\n‚úÖ AN√ÅLISIS COMPLETADO")
        print(f"‚è±Ô∏è  Tiempo total: {total_time:.2f} segundos")
        print(f"üìä Puntos procesados: {len(analyzer.points)}")
        print(f"‚ö° Velocidad global: {len(analyzer.points)/total_time:.0f} puntos/segundo")
        
        print(f"\nüìà RENDIMIENTO:")
        print(f"   - Inserci√≥n masiva: ‚úÖ R√°pida como PostGIS")
        print(f"   - Consultas espaciales: ‚úÖ KDTree (muy r√°pido)")
        print(f"   - An√°lisis geom√©trico: ‚úÖ CGAL (m√°s r√°pido que PostGIS)")
        print(f"   - Integraci√≥n OSMnx: ‚úÖ Optimizada")
        
    except Exception as e:
        logger.error(f"Error en el an√°lisis: {e}")
        raise


if __name__ == "__main__":
    main()
